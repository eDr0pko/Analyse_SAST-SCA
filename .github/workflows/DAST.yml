name: TP2 DAST - Scan OWASP ZAP sur mon projet

permissions:
  contents: read
  issues: write

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  dast:
    runs-on: ubuntu-latest

    steps:
      # 1) Récupération du code source de TON repo
      - name: Checkout
        uses: actions/checkout@v4

      # 2) Installer Python
      - name: Installer Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # 3) Installer les dépendances de ton projet
      - name: Installer les dépendances Python
        run: |
          python3 -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # 4) Démarrer ton serveur Python
      - name: Démarrer le serveur de l'application
        run: |
          nohup python3 -m http.server 8000 &
          sleep 5  # petit délai pour s'assurer qu'il est bien lancé

      # 5) Vérifier que le serveur répond bien
      - name: Vérifier disponibilité de l'application
        run: |
          for i in {1..20}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:8000)
            echo "Tentative $i -> HTTP $code"
            if [ "$code" = "200" ] || [ "$code" = "301" ] || [ "$code" = "302" ]; then
              echo "✅ Application disponible"
              exit 0
            fi
            sleep 3
          done
          echo "❌ L'application n'a pas démarré correctement"
          exit 1

      # 6) Lancer le scan OWASP ZAP (Baseline)
      - name: Lancer OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.14.0
        with:
          target: "http://127.0.0.1:8000"
          cmd_options: "-a -d"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 7) (Optionnel) Arrêter proprement si tu lances un vrai serveur
      - name: Nettoyage
        if: always()
        run: |
          pkill -f "http.server" || true
